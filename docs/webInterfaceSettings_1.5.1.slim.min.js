var received = false;

function poll() {
    var sleep = time => new Promise(resolve => setTimeout(resolve, time))
    var poll = (promiseFn, time) => promiseFn().then(sleep(time).then(() => poll(promiseFn, time)))
    poll(() => new Promise(() => {
        if (!received) {
            received = true;
            const http = new XMLHttpRequest();
            http.open('GET', 'getsettings');
            http.send();
            http.onload = () => {
                console.log(http.responseText);
                var prefs = JSON.parse(http.responseText);
                console.log(prefs);
                $('#deviceName').val(prefs.deviceName);
                $('#microcontrollerIP').val(prefs.ip);
                if (prefs.dhcp == '1') {
                    document.getElementById('microcontrollerIP').disabled = true;
                } else {
                    $("#dhcpCheckbox").click();
                }
                if (prefs.mqttIp.length == 0) {
                    $("#mqttCheckbox").click();
                }
                $('#inputMqttIp').val(prefs.mqttIp);
                $('#ssid').val(prefs.ssid);
                $('#wifipwd').val("***************");
                $('#mqttPort').val(prefs.mqttPort);
                $('#mqttTopic').val(prefs.mqttTopic);
                $('#mqttuser').val(prefs.mqttuser);
                $('#mqttpass').val(prefs.mqttpass);
                $('#lednum').val(prefs.lednum);
                $('#additionalParam').val(prefs.gpio);
                $('#gpioClock').val(prefs.gpioClock);
                $('#colorMode').val(prefs.colorMode);
                $('#colorOrder').val(prefs.colorOrder);
                $('#br').val(prefs.br);
                if (prefs.colorMode == '5') {
                    $("#clock").show();
                } else {
                    $("#clock").hide();
                }
            }
        }
    }), 5000);
}

