var received = false;

function poll() {
    var sleep = time => new Promise(resolve => setTimeout(resolve, time))
    var poll = (promiseFn, time) => promiseFn().then(sleep(time).then(() => poll(promiseFn, time)))
    poll(() => new Promise(() => {
        if (!received) {
            received = true;
            const http = new XMLHttpRequest();
            http.open('GET', 'getLdr');
            http.send();
            http.onload = () => {
                console.log(http.responseText);
                var prefs = JSON.parse(http.responseText);
                console.log(prefs);
                $('#ldrEnabled').val(prefs.ldrEnabled);
                $('#ldrContinuous').val(prefs.ldrContinuous);
                $('#ldrMin').val(prefs.ldrMin);
                if (prefs.ldrEnabled == '1') {
                    var ldrEnCheck = document.getElementById('ldrEnabled');
                    ldrEnabledAction(ldrEnCheck);
                } else {
                    $("#ldrEnabled").click();
                    ldrEnabledAction(ldrEnCheck);
                }
                if (prefs.ldrContinuous != '1') {
                    $("#ldrContinuous").click();
                }
            }
        }
    }), 5000);
}
function callDeviceLdr(calibrateOrResetLDR) {
    let payload = "ldrMin=" + $('#ldrMin').val();
    if (calibrateOrResetLDR != undefined) {
        payload += "&ldrMax=" + calibrateOrResetLDR;
    } else {
        payload += "&ldrMax=" + 0;
    }
    payload += "&ldrEnabled=" + ($("#ldrEnabled").prop("checked") ? 'true' : 'false');
    payload += "&ldrContinuous=" + ($("#ldrContinuous").prop("checked") ? 'true' : 'false');
    console.log(payload);
    const http = new XMLHttpRequest();
    http.open('GET', 'ldr?' + payload);
    http.send();
    http.onload = () => {
        console.log(http.responseText);
        alert("Success: rebooting the microcontroller");
        return false;
    };
}
function ldrEnabledAction(ldrEnabled) {
    if (ldrEnabled != undefined && ldrEnabled.checked) {
        document.getElementById('ldrMin').disabled = false;
        document.getElementById('ldrContinuous').disabled = false;
    } else {
        document.getElementById('ldrMin').disabled = true;
        document.getElementById('ldrContinuous').disabled = true;
    }
}
function calLDR() {
    callDeviceLdr(1);
    
}
function resetLDR() {
    callDeviceLdr(-1);
}
const sleep = (s) => {
    return new Promise(resolve => setTimeout(resolve, (s)));
};
sleep(100).then(() => {
    poll();
    $('#ldrMin').append(new Option("10%", "10"));
    $('#ldrMin').append(new Option("20%", "20"));
    $('#ldrMin').append(new Option("30%", "30"));
    $('#ldrMin').append(new Option("40%", "40"));
    $('#ldrMin').append(new Option("50%", "50"));
    $('#ldrMin').append(new Option("60%", "60"));
    $('#ldrMin').append(new Option("70%", "70"));
    $('#ldrMin').append(new Option("80%", "80"));
    $('#ldrMin').append(new Option("90%", "90"));
    $('#ldrMin').append(new Option("100%", "100"));
});
