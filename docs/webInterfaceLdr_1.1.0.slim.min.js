var firstRun = true;

function poll() {
    var sleep = time => new Promise(resolve => setTimeout(resolve, time))
    var poll = (promiseFn, time) => promiseFn().then(sleep(time).then(() => poll(promiseFn, time)))
    poll(() => new Promise(() => {
        const http = new XMLHttpRequest();
        http.open('GET', 'getLdr');
        http.send();
        http.onload = () => {
            console.log(http.responseText);
            var prefs = JSON.parse(http.responseText);
            console.log(prefs);
            if (firstRun) {
                $('#ldrEnabled').val(prefs.ldrEnabled);
                $('#ldrContinuous').val(prefs.ldrContinuous);
                $('#ldrMin').val(prefs.ldrMin);       
                if (prefs.ldrEnabled == '1') {
                    var ldrEnCheck = document.getElementById('ldrEnabled');                
                    $('#ldrEnabled').prop('checked', true);
                    ldrEnabledAction(ldrEnCheck);
                } else {
                    $('#ldrEnabled').prop('checked', false);
                    ldrEnabledAction(ldrEnCheck);
                }
                if (prefs.ldrContinuous == '1') {
                    $('#ldrContinuous').prop('checked', true);
                } else {
                    $('#ldrContinuous').prop('checked', false);
                }
                firstRun = false;
            }            
            if (prefs.ldrMax) {
                $('#ldrgrp').show();
                $('#ldr').text(Math.round(prefs.ldrMax) + '%');
            } else {
                $('#ldrgrp').hide();
            }
        }
    }), 5000);
}
function callDeviceLdr(calibrateOrResetLDR) {
    var payload = {
        ldrEnabled: ($("#ldrEnabled").prop("checked") ? 'true' : 'false'),
        ldrContinuous: ($("#ldrContinuous").prop("checked") ? 'true' : 'false'),
        ldrMin: $('#ldrMin').val()
    }
    if (calibrateOrResetLDR != undefined) {
        payload.ldrMax = calibrateOrResetLDR;
    } else {
        payload.ldrMax = -2;
    }
    console.log(payload);
    const http = new XMLHttpRequest();
    http.open('GET', 'lights/glowwormluciferin/ldr?payload=' + JSON.stringify(payload));
    http.send();
    http.onload = () => {
        console.log(http.responseText);
        if (calibrateOrResetLDR == undefined) {
            alert("Success: rebooting the microcontroller");
        } else if (calibrateOrResetLDR == 1) {
            alert("LDR CALIBRATION Success: rebooting the microcontroller");
        } else if (calibrateOrResetLDR == -1) {
            alert("LDR RESET Success: rebooting the microcontroller");
        }
        return false;
    };
}
function ldrEnabledAction(ldrEnabled) {
    if (ldrEnabled != undefined && ldrEnabled.checked) {
        document.getElementById('ldrMin').disabled = false;
        document.getElementById('ldrContinuous').disabled = false;
    } else {
        document.getElementById('ldrMin').disabled = true;
        document.getElementById('ldrContinuous').disabled = true;
    }
}
function calLDR() {
    callDeviceLdr(1);
    
}
function resetLDR() {
    callDeviceLdr(-1);
}
const sleep = (s) => {
    return new Promise(resolve => setTimeout(resolve, (s)));
};
sleep(100).then(() => {
    poll();
    $('#ldrMin').append(new Option("10%", "10"));
    $('#ldrMin').append(new Option("20%", "20"));
    $('#ldrMin').append(new Option("30%", "30"));
    $('#ldrMin').append(new Option("40%", "40"));
    $('#ldrMin').append(new Option("50%", "50"));
    $('#ldrMin').append(new Option("60%", "60"));
    $('#ldrMin').append(new Option("70%", "70"));
    $('#ldrMin').append(new Option("80%", "80"));
    $('#ldrMin').append(new Option("90%", "90"));
    $('#ldrMin').append(new Option("100%", "100"));
});
