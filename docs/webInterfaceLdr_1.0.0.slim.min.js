var received = false;

function poll() {
    var sleep = time => new Promise(resolve => setTimeout(resolve, time))
    var poll = (promiseFn, time) => promiseFn().then(sleep(time).then(() => poll(promiseFn, time)))
    poll(() => new Promise(() => {
        if (!received) {
            received = true;
            const http = new XMLHttpRequest();
            http.open('GET', 'getLdr');
            http.send();
            http.onload = () => {
                console.log(http.responseText);
                var prefs = JSON.parse(http.responseText);
                console.log(prefs);
                $('#ldrEnabled').val(prefs.ldrEnabled);
                $('#ldrContinuous').val(prefs.ldrContinuous);
                $('#ldrMin').val(prefs.ldrMin + "%");
                $('#ldrMax').val(prefs.ldrMax + "%");

//                 if (prefs.dhcp == '1') {
//                     document.getElementById('microcontrollerIP').disabled = true;
//                 } else {
//                     $("#dhcpCheckbox").click();
//                 }
//                 if (prefs.mqttIp.length == 0) {
//                     $("#mqttCheckbox").click();
//                 }              
            }
        }
    }), 5000);
}
function callDeviceLdr() {
    let payload = "minBrLdr=" + $('#minBrLdr').val();
    payload += "&maxBrLdr=" + $('#maxBrLdr').val();
    payload += "&ldrCheckbox=" + ($("#ldrCheckbox").prop("checked") ? 'true' : 'false');   
    payload += "&ldrContinuous=" + ($("#ldrContinuous").prop("checked") ? 'true' : 'false');   
    console.log(payload);
    const http = new XMLHttpRequest();
    http.open('GET', 'ldr?' + payload);
    http.send();
    http.onload = () => {
        console.log(http.responseText);
        alert("Success: rebooting the microcontroller");
        return false;
    };
}
function ldrCheckboxAction(ldrCheckbox) {
    if (ldrCheckbox.checked) {
        document.getElementById('minBrLdr').disabled = false;
        document.getElementById('maxBrLdr').disabled = false;       
        document.getElementById('ldrContinuous').disabled = false;       
    } else {
        document.getElementById('minBrLdr').disabled = true;
        document.getElementById('maxBrLdr').disabled = true;       
        document.getElementById('ldrContinuous').disabled = true;       
    }        
}
const sleep = (s) => {
    return new Promise(resolve => setTimeout(resolve, (s)));
};
sleep(100).then(() => {
    poll();
    $('#minBrLdr').append(new Option("10%", "10"));
    $('#minBrLdr').append(new Option("20%", "20"));
    $('#minBrLdr').append(new Option("30%", "30"));
    $('#minBrLdr').append(new Option("40%", "40"));
    $('#minBrLdr').append(new Option("50%", "50"));
    $('#minBrLdr').append(new Option("60%", "60"));
    $('#minBrLdr').append(new Option("70%", "70"));
    $('#minBrLdr').append(new Option("80%", "80"));
    $('#minBrLdr').append(new Option("90%", "90"));
    $('#minBrLdr').append(new Option("100%", "100"));  
    
    $('#maxBrLdr').append(new Option("10%", "10"));
    $('#maxBrLdr').append(new Option("20%", "20"));
    $('#maxBrLdr').append(new Option("30%", "30"));
    $('#maxBrLdr').append(new Option("40%", "40"));
    $('#maxBrLdr').append(new Option("50%", "50"));
    $('#maxBrLdr').append(new Option("60%", "60"));
    $('#maxBrLdr').append(new Option("70%", "70"));
    $('#maxBrLdr').append(new Option("80%", "80"));
    $('#maxBrLdr').append(new Option("90%", "90"));
    $('#maxBrLdr').append(new Option("100%", "100")); 
});
